---
import ParticlesBackground from '@/components/ParticlesBackground.astro';
import Terminal from '@/components/Terminal.astro';
---

<section id="home">
  <ParticlesBackground />
  <div class="content">
    <div class="two-column-layout">
      <div class="left-column">
        <h1 class="intro-text">
          Hello, my name is Rudy, and I'm <span id="article">a</span> <span id="typed-text"></span><span class="cursor">|</span>
        </h1>
      </div>
      <div class="right-column">
        <Terminal />
      </div>
    </div>
  </div>
</section>

<style>
  section {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    min-height: 110vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .content {
    position: relative;
    z-index: 10;
    width: 100%;
    max-width: 1400px;
    padding: 0 2rem;
    pointer-events: none;
  }

  .two-column-layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    margin-top: -10rem;
    margin-left: -2rem;
  }

  .left-column {
    display: flex;
    flex-direction: column;
    justify-content: center;
    pointer-events: auto;
  }

  .right-column {
    pointer-events: auto;
  }

  .intro-text {
    font-size: 3rem;
    font-weight: 700;
    color: white;
    line-height: 1.3;
    margin: 0;
  }

  #typed-text {
    color: rgb(153, 82, 228);
    font-weight: 700;
  }

  .cursor {
    color: rgb(153, 82, 228);
    animation: blink 1s step-end infinite;
    font-weight: 400;
  }

  @keyframes blink {
    0%, 50% {
      opacity: 1;
    }
    51%, 100% {
      opacity: 0;
    }
  }

  @media (max-width: 1024px) {
    .two-column-layout {
      grid-template-columns: 1fr;
      gap: 2rem;
      margin-top: -5rem;
      margin-left: 0;
    }

    .intro-text {
      font-size: 2.5rem;
    }
  }

  @media (max-width: 768px) {
    .two-column-layout {
      margin-top: 0;
      margin-left: 0;
    }

    .intro-text {
      font-size: 2rem;
    }

    .content {
      padding: 0 1rem;
    }

    .right-column {
      padding: 0;
      width: 100%;
    }
  }

  @media (max-width: 480px) {
    .content {
      padding: 0 1rem;
    }

    .right-column {
      padding: 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const typedTextElement = document.getElementById('typed-text');
    const articleElement = document.getElementById('article');
    const introText = document.querySelector('.intro-text');
    if (!typedTextElement || !articleElement || !introText) return;

    const words = [
      'Integration Engineer',
      'Full-Stack Developer',
      'AI Systems Architect',
      'Project Lead',
      'Computer Scientist',
      'Problem Solver',
      'The Best Candidate'
    ];

    let wordIndex = 0;
    let charIndex = 0;
    let articleCharIndex = 0;
    let isDeleting = false;
    let isTypingArticle = true;
    let typingSpeed = 60;
    let isPaused = false;
    let timeoutId: number | null = null;

    function getArticle(word: string): string {
      // No article for words starting with "The"
      if (word.toLowerCase().startsWith('the')) {
        return '';
      }
      const vowels = ['a', 'e', 'i', 'o', 'u'];
      return vowels.includes(word[0].toLowerCase()) ? 'an' : 'a';
    }

    function type() {
      if (isPaused) return; // Don't continue if paused

      const currentWord = words[wordIndex];
      const currentArticle = getArticle(currentWord);

      if (isDeleting) {
        // Delete word first, then article
        if (charIndex > 0) {
          // Delete word characters
          typedTextElement.textContent = currentWord.substring(0, charIndex - 1);
          charIndex--;
          typingSpeed = 30;
        } else if (articleCharIndex > 0) {
          // Delete article characters
          articleElement.textContent = currentArticle.substring(0, articleCharIndex - 1);
          articleCharIndex--;
          typingSpeed = 30;
        } else {
          // Everything deleted, move to next word
          isDeleting = false;
          isTypingArticle = true;
          wordIndex = (wordIndex + 1) % words.length;
          typingSpeed = 500; // Pause before typing next word
        }
      } else {
        // Type article first, then word
        if (isTypingArticle) {
          const nextArticle = getArticle(words[wordIndex]);
          if (articleCharIndex < nextArticle.length) {
            // Type article characters
            articleElement.textContent = nextArticle.substring(0, articleCharIndex + 1);
            articleCharIndex++;
            typingSpeed = 60;
          } else {
            // Article complete, start typing word
            isTypingArticle = false;
            typingSpeed = 100; // Brief pause between article and word
          }
        } else {
          // Type word characters
          typedTextElement.textContent = currentWord.substring(0, charIndex + 1);
          charIndex++;
          typingSpeed = 60;
          
          // Check if word is complete
          if (charIndex === currentWord.length) {
            typingSpeed = 2000; // Pause at end
            isDeleting = true;
          }
        }
      }

      timeoutId = setTimeout(type, typingSpeed);
    }

    // Pause on hover
    introText.addEventListener('mouseenter', () => {
      isPaused = true;
      if (timeoutId !== null) {
        clearTimeout(timeoutId);
      }
    });

    // Resume on unhover
    introText.addEventListener('mouseleave', () => {
      isPaused = false;
      type(); // Resume the animation
    });

    // Start typing animation
    type();
  });
</script>

