---
import ProjectCard from '@/components/ProjectCard.astro';
import { projects } from '@/data/projects';

const skillCategories = [
  {
    title: 'Languages',
    skills: ['Java', 'C#', 'Python', 'JavaScript', 'TypeScript', 'HTML/CSS', 'SQL', 'OCaml', 'Kotlin']
  },
  {
    title: 'Frameworks & Libraries',
    skills: ['.NET Core', 'React', 'JUnit', 'PyTorch', 'FastAPI', 'Node.js', 'Django', 'Jetpack Compose']
  },
  {
    title: 'Technologies & Tools',
    skills: ['Git', 'Docker', 'Unix', 'PostgreSQL', 'Heroku', 'Vercel', 'Supabase', 'Astro', 'Tailwind CSS']
  }
];

// Icon mapping for skills - using Simple Icons color scheme
const skillIcons: Record<string, string> = {
  'Java': '#007396',
  'C#': '#239120',
  'Python': '#3776AB',
  'JavaScript': '#F7DF1E',
  'TypeScript': '#3178C6',
  'HTML/CSS': '#E34F26',
  'SQL': '#4479A1',
  'OCaml': '#EC6813',
  'Kotlin': '#7F52FF',
  '.NET Core': '#512BD4',
  'React': '#61DAFB',
  'JUnit': '#25A162',
  'PyTorch': '#EE4C2C',
  'FastAPI': '#009688',
  'Node.js': '#339933',
  'Django': '#092E20',
  'Git': '#F05032',
  'Docker': '#2496ED',
  'Unix': '#000000',
  'PostgreSQL': '#4169E1',
  'Heroku': '#430098',
  'Vercel': '#000000',
  'Jetpack Compose': '#4285F4',
  'Supabase': '#3ECF8E',
  'Astro': '#FF5D01',
  'Tailwind CSS': '#06B6D4'
};
---

<section id="projects">
  <div class="container">
    <h2 class="section-title">Projects</h2>
    
    <div class="skills-section">
      <h3 class="skills-title">SKILLS</h3>
      <div class="divider"></div>
      <div class="skills-categories">
        {skillCategories.map((category) => (
          <div class="skill-category">
            <div class="category-title">{category.title}</div>
            <div class="skills-list">
              {category.skills.map((skill) => (
                <button 
                  class="skill-tag" 
                  data-skill={skill}
                  aria-label={`Filter projects by ${skill}`}
                >
                  <span class="skill-icon" style={`background-color: ${skillIcons[skill] || '#666'}`}></span>
                  {skill}
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
      <button class="clear-filter" id="clear-filter" style="display: none;">
        Clear Filter
      </button>
    </div>
    
    <div class="projects-grid" id="projects-grid">
      {projects.map((project) => (
        <div class="project-wrapper" data-tags={project.tags?.join(',') || ''}>
          <ProjectCard project={project} />
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  section {
    min-height: 100vh;
    padding: 4rem 2rem 25vh 2rem;
    margin-top: 4rem;
    background-color: #0a0a0a;
    border-top: 1px solid #1a1a1a;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-title {
    font-size: 3.5rem;
    font-weight: 800;
    margin-bottom: 4rem;
    text-align: center;
    color: white;
    position: relative;
    padding-bottom: 1rem;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 4px;
    background: linear-gradient(90deg, transparent, rgb(153, 82, 228), transparent);
  }

  .skills-section {
    display: flex;
    gap: 2rem;
    margin-bottom: 4rem;
    padding: 1.5rem 0;
  }

  .skills-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: white;
    margin: 0;
    writing-mode: vertical-rl;
    text-orientation: upright;
    letter-spacing: 0.15em;
    height: 30%;
    display: flex;
    align-items: center;
  }

  .divider {
    width: 1px;
    min-height: 100%;
    background-color: #333;
    flex-shrink: 0;
  }

  .skills-categories {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    flex: 1;
  }

  .skill-category {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .category-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #999;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .skills-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .skill-tag {
    background-color: white;
    color: #1a1a1a;
    font-size: 0.875rem;
    padding: 0.4rem 0.75rem;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .skill-icon {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .skill-tag:hover {
    background-color: rgb(153, 82, 228);
    color: white;
  }

  .skill-tag.active {
    background-color: rgb(153, 82, 228);
    color: white;
  }

  .clear-filter {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #1a1a1a;
    color: white;
    border: 1px solid #333;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.3s ease;
    align-self: flex-start;
    white-space: nowrap;
  }

  .clear-filter:hover {
    background-color: #2a2a2a;
    border-color: #666;
  }

  .project-wrapper {
    transition: all 0.5s ease;
    order: 0;
  }

  .project-wrapper.filtered-out {
    order: 1;
    opacity: 0.3;
  }

  .project-wrapper.filtered-out :global(.project-card) {
    filter: grayscale(100%);
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    section {
      padding: 2rem 1rem 15vh 1rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .skills-section {
      flex-direction: column;
      gap: 1rem;
    }

    .skills-title {
      writing-mode: horizontal-tb;
      text-orientation: mixed;
      height: auto;
    }

    .divider {
      display: none;
    }

    .projects-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 1024px) {
    .projects-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .skills-section {
      flex-direction: column;
      gap: 1rem;
    }

    .divider {
      width: 100%;
      height: 1px;
      min-height: 1px;
    }

    .projects-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const skillTags = document.querySelectorAll('.skill-tag');
    const projectWrappers = document.querySelectorAll('.project-wrapper');
    const clearFilterBtn = document.getElementById('clear-filter');
    let activeSkills: Set<string> = new Set();

    function updateFilter() {
      // Update visual state of skill tags
      skillTags.forEach(tag => {
        const skill = tag.getAttribute('data-skill');
        if (skill && activeSkills.has(skill)) {
          tag.classList.add('active');
        } else {
          tag.classList.remove('active');
        }
      });

      // Filter and reorder projects
      if (activeSkills.size === 0) {
        // No filters active - show all projects normally
        projectWrappers.forEach(wrapper => {
          wrapper.classList.remove('filtered-out');
        });
        if (clearFilterBtn) {
          clearFilterBtn.style.display = 'none';
        }
      } else {
        // Filters active - show projects that match ALL of the active skills
        projectWrappers.forEach(wrapper => {
          const tags = wrapper.getAttribute('data-tags')?.split(',') || [];
          const hasAllActiveSkills = Array.from(activeSkills).every(skill => tags.includes(skill));

          if (hasAllActiveSkills) {
            wrapper.classList.remove('filtered-out');
          } else {
            wrapper.classList.add('filtered-out');
          }
        });
        if (clearFilterBtn) {
          clearFilterBtn.style.display = 'block';
        }
      }
    }

    function toggleSkill(skill: string) {
      if (activeSkills.has(skill)) {
        activeSkills.delete(skill);
      } else {
        activeSkills.add(skill);
      }
      updateFilter();
    }

    function clearFilter() {
      activeSkills.clear();
      updateFilter();
    }

    // Add click handlers to skill tags
    skillTags.forEach(tag => {
      tag.addEventListener('click', () => {
        const skill = tag.getAttribute('data-skill');
        if (skill) {
          toggleSkill(skill);
        }
      });
    });

    // Add click handler to clear filter button
    if (clearFilterBtn) {
      clearFilterBtn.addEventListener('click', clearFilter);
    }
  });
</script>
