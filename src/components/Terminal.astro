---
// Terminal component for interactive Q&A
---

<div class="terminal-window">
  <div class="terminal-header">
    <div class="terminal-buttons">
      <span class="btn close"></span>
      <span class="btn minimize"></span>
      <span class="btn maximize"></span>
    </div>
    <div class="terminal-title">rudy@portfolio:~</div>
  </div>
  <div class="terminal-body" id="terminal-body">
    <div class="terminal-output" id="terminal-output">
      <div class="welcome-message">Welcome! Ask me anything!</div>
      <div class="hint">Type 'help' to see available commands</div>
    </div>
    <div class="terminal-input-line">
      <span class="prompt">rudy@portfolio:~$</span>
      <input 
        type="text" 
        id="terminal-input" 
        class="terminal-input"
        autocomplete="off"
        spellcheck="false"
      />
    </div>
  </div>
</div>

<style>
  .terminal-window {
    background-color: #0a0a0a;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    border: 1px solid #1a1a1a;
    font-family: 'Courier New', Courier, monospace;
    height: 400px;
    display: flex;
    flex-direction: column;
  }

  .terminal-header {
    background-color: #1a1a1a;
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid #2a2a2a;
  }

  .terminal-buttons {
    display: flex;
    gap: 0.5rem;
  }

  .btn {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: block;
  }

  .btn.close {
    background-color: #ff5f56;
  }

  .btn.minimize {
    background-color: #ffbd2e;
  }

  .btn.maximize {
    background-color: #27c93f;
  }

  .terminal-title {
    color: #666;
    font-size: 0.875rem;
    flex: 1;
    text-align: center;
  }

  .terminal-body {
    padding: 1rem;
    flex: 1;
    overflow-y: auto;
  }

  .terminal-output {
    color: rgb(153, 82, 228);
    font-size: 1rem;
    line-height: 1.8;
    margin-bottom: 1rem;
  }

  .welcome-message {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #fff;
    font-size: 1.1rem;
  }

  .hint {
    color: #999;
    font-size: 0.9rem;
    margin-bottom: 1.5rem;
  }

  .terminal-input-line {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .prompt {
    color: rgb(153, 82, 228);
    font-weight: 600;
    white-space: nowrap;
  }

  .terminal-input {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: rgb(153, 82, 228);
    font-family: 'Courier New', Courier, monospace;
    font-size: 1rem;
    caret-color: rgb(153, 82, 228);
  }

  .command-line {
    margin-bottom: 0.75rem;
    margin-top: 1rem;
  }

  .command {
    color: rgb(153, 82, 228);
    font-weight: 600;
  }

  .response {
    color: #e8e8e8;
    margin-left: 0;
    white-space: pre-wrap;
    margin-bottom: 1.5rem;
    line-height: 1.8;
    font-size: 1rem;
  }

  .error {
    color: #ff6b6b;
  }

  /* Scrollbar styling */
  .terminal-body::-webkit-scrollbar {
    width: 8px;
  }

  .terminal-body::-webkit-scrollbar-track {
    background: #0a0a0a;
  }

  .terminal-body::-webkit-scrollbar-thumb {
    background: #333;
    border-radius: 4px;
  }

  .terminal-body::-webkit-scrollbar-thumb:hover {
    background: #555;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .terminal-window {
      height: 300px;
      font-size: 0.85rem;
    }

    .terminal-header {
      padding: 0.5rem 0.75rem;
    }

    .btn {
      width: 10px;
      height: 10px;
    }

    .terminal-title {
      font-size: 0.75rem;
    }

    .terminal-body {
      padding: 0.75rem;
    }

    .terminal-output {
      font-size: 0.85rem;
      line-height: 1.6;
    }

    .welcome-message {
      font-size: 0.95rem;
    }

    .hint {
      font-size: 0.8rem;
    }

    .prompt {
      font-size: 0.85rem;
    }

    .terminal-input {
      font-size: 0.85rem;
    }

    .response {
      font-size: 0.85rem;
      line-height: 1.6;
    }
  }

  @media (max-width: 480px) {
    .terminal-window {
      height: 250px;
    }

    .terminal-header {
      padding: 0.4rem 0.6rem;
    }

    .btn {
      width: 8px;
      height: 8px;
    }

    .terminal-buttons {
      gap: 0.4rem;
    }

    .terminal-title {
      font-size: 0.7rem;
    }

    .terminal-body {
      padding: 0.5rem;
    }

    .terminal-output {
      font-size: 0.75rem;
      line-height: 1.5;
    }

    .welcome-message {
      font-size: 0.85rem;
    }

    .hint {
      font-size: 0.7rem;
    }

    .prompt {
      font-size: 0.75rem;
    }

    .terminal-input {
      font-size: 0.75rem;
    }

    .response {
      font-size: 0.75rem;
      line-height: 1.5;
    }
  }
</style>

<!-- Load confetti from CDN -->
<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"></script>

<script>
  const commands = {
    help: `Available commands:\n\nhelp      - Show this message\nabout     - Learn about me\nskills    - View my technical skills\nprojects  - See my featured projects\neducation - View my education background\ncontact   - Get my contact information\nclear     - Clear the terminal\n\nTry typing any command!`,

    about: `Hi! I'm Rudy (Rudolf Rissling).\n\nI'm a passionate software engineer specializing in full-stack development, AI systems, and integration solutions.\n\nCurrently working as a part-time remote consultant at Lawyer.com, where I build production AI automation platforms. Previously interned there developing Gmail automation and NL2SQL systems.\n\nI love building elegant solutions to complex problems and am always excited to learn new technologies.\n\nPursuing a Bachelor's in Computer Science at Boston University (transferred from Virginia Tech in 2024).`,

    skills: `Technical Skills:\n\nLanguages:\n  Java, C#, Python, JavaScript, TypeScript, HTML/CSS, SQL, OCaml, Kotlin\n\nFrameworks & Libraries:\n  .NET Core, React, JUnit, PyTorch, FastAPI, Node.js, Django, Jetpack Compose\n\nTechnologies & Tools:\n  Git, Docker, Gradle, Unix, PostgreSQL, Heroku, Vercel, Supabase, Astro, Tailwind CSS`,

    projects: `Featured Projects:\n\n1. Portfolio Website (In Progress - 85%)\n   Modern interactive portfolio with dynamic typing and terminal interface\n   Tech: JavaScript, React, HTML/CSS, Astro, TypeScript, Tailwind CSS\n\n2. CourseBranch (In Progress - 15%)\n   Visual course planning platform with interactive tree diagrams\n   Tech: React, Node.js, PostgreSQL, JavaScript, HTML/CSS\n\n3. Ventaura (Completed)\n   Event recommendations platform with 10,000+ daily requests\n   Tech: C#, .NET Core, Python, React, PostgreSQL, PyTorch, FastAPI, Node.js, Supabase\n\n4. Muse (In Progress - 90%)\n   Creative community mobile app with 70% storage cost reduction\n   Tech: Kotlin, Jetpack Compose, PostgreSQL, Supabase\n\n5. QueryMind NL2SQL Engine [CONFIDENTIAL]\n   Natural language to SQL conversion with 85% accuracy\n   Tech: Python, FastAPI, SQL\n\n6. Gmail AI Automation Platform [CONFIDENTIAL]\n   Gmail management automation achieving 99.5% uptime\n   Tech: Python, FastAPI\n\nScroll down to the Projects section to see more details!`,

    education: `Education:\n\nüéì Bachelor of Arts in Computer Science (In Progress)\n   Boston University (BU)\n   Started: January 2024 - May 2026\n\nüéì Computer Science Studies\n   Virginia Tech (VT)\n   Started: August 2022 - January 2024 (1.5 years)\n\nTransferred from VT to BU to continue my CS journey. Both institutions provided excellent foundations in software engineering, algorithms, and system design.`,

    contact: `Contact Information:\n\nüìß Email: Available on LinkedIn\n\nüíº LinkedIn: linkedin.com/in/rudolf-rissling\n\nüêô GitHub: github.com/rayfould\n\nüíª LeetCode: leetcode.com/u/Rayfould\n\n\nFeel free to reach out - I'm always happy to connect!`,

    clear: '__CLEAR__',

    // Easter eggs
    anything: 'I think you forgot an exclamation point there, ey?',

    'anything!': `üéâ Congratulations. A dad joke. Hope you're proud of yourself. üéâ`,
    
    sudo: `Yeah not happening bud.`,
    
    'rm -rf /': `Error: Permission denied. Obviously.`,
    
    exit: `You can't escape that easily! Try 'clear' instead.`,
    
    whoami: `You are a curious visitor exploring Rudy's portfolio!`,
    
    ls: `projects/  education/  skills/  about.txt  contact.txt  redacted/`,
    
    pwd: `/home/rudy/portfolio`,
    
    'cd redacted': '__OPEN_LINK__https://www.youtube.com/watch?v=dQw4w9WgXcQ',
    
    'hello world': `Aren't you a bit too young to be browsing the internet?`,
  };

  const terminalBody = document.getElementById('terminal-body');
  const terminalOutput = document.getElementById('terminal-output');
  const terminalInput = document.getElementById('terminal-input') as HTMLInputElement;

  let commandHistory: string[] = [];
  let historyIndex = -1;

  function addOutput(text: string, className: string = '') {
    const div = document.createElement('div');
    div.className = className;
    div.innerText = text;
    terminalOutput?.appendChild(div);
    scrollToBottom();
  }

  function addCommand(command: string) {
    const div = document.createElement('div');
    div.className = 'command-line';
    div.innerHTML = `<span class="prompt">rudy@portfolio:~$</span> <span class="command">${command}</span>`;
    terminalOutput?.appendChild(div);
  }

  function scrollToBottom() {
    if (terminalBody) {
      terminalBody.scrollTop = terminalBody.scrollHeight;
    }
  }

  function processCommand(input: string) {
    const command = input.trim().toLowerCase();
    
    if (!command) return;

    // Add to history
    commandHistory.push(input);
    historyIndex = commandHistory.length;

    // Display command
    addCommand(input);

    // Process command
    if (command === 'clear') {
      if (terminalOutput) {
        terminalOutput.innerHTML = '';
      }
    } else if (commands[command]) {
      const response = commands[command];
      
      // Check if this is a link command
      if (response.startsWith('__OPEN_LINK__')) {
        const url = response.replace('__OPEN_LINK__', '');
        addOutput(`Accessing classified files... üîì`, 'response');
        setTimeout(() => {
          window.open(url, '_blank');
        }, 500);
      } else {
        addOutput(response, 'response');
      }
      
      // Trigger confetti for specific commands
      if (typeof confetti !== 'undefined' && (command === 'anything!')) {
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 }
        });
        
        // Extra burst for party mode
        if (command === 'party') {
          setTimeout(() => confetti({
            particleCount: 50,
            angle: 60,
            spread: 55,
            origin: { x: 0 }
          }), 200);
          setTimeout(() => confetti({
            particleCount: 50,
            angle: 120,
            spread: 55,
            origin: { x: 1 }
          }), 400);
        }
      }
    } else {
      addOutput(`Command not found: ${command}. Type 'help' for available commands.`, 'response error');
    }

    // Clear input
    if (terminalInput) {
      terminalInput.value = '';
    }
  }

  // Enter key handler
  terminalInput?.addEventListener('keydown', (e: KeyboardEvent) => {
    if (e.key === 'Enter') {
      processCommand(terminalInput.value);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex > 0) {
        historyIndex--;
        terminalInput.value = commandHistory[historyIndex];
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        terminalInput.value = commandHistory[historyIndex];
      } else {
        historyIndex = commandHistory.length;
        terminalInput.value = '';
      }
    }
  });

  // Auto-focus input when clicking anywhere in terminal
  terminalBody?.addEventListener('click', () => {
    terminalInput?.focus();
  });

  // Focus input on load
  terminalInput?.focus();
</script>

